import com.modrinth.minotaur.dependencies.ModDependency

plugins {
    id 'dev.architectury.loom' version '1.4-SNAPSHOT'
    id 'maven-publish'

    // 用于模组发布
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.+'
    id "com.github.breadmoirai.github-release" version "2.5.2"
}

base {
    archivesName = project.archives_base_name + "-forge"
}
version = project.mod_version + '-mc' + project.minecraft_version
group = project.maven_group

allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    // 合理排序模组依赖的 Cloth Config
    maven { url "https://maven.shedaniel.me/" }
    /*
    这个是存储在 GitHub 上的 BRRP 模组
    maven {
        url 'https://raw.nuaa.cf/SolidBlock-cn/mvn-repo/main'
    }*/
    // 合理排序和 BRRP 模组。这两个模组均存储于本地的 maven 仓库。
    mavenLocal()
}

loom {
    runs {
        client {
            programArg "-username=Solid"
        }
    }
    forge {
        mixinConfig "extshape.mixin.json"
    }
    runConfigs.configureEach {
        it.configName = "Minecraft Forge ${it.name.capitalize()}"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    forge "net.minecraftforge:forge:${project.minecraft_version}-${forge_version}"

    // 下面两个模组均存储于本地的 maven 仓库。
    // BRRP 模组
    def brrp_mc_version = project.properties.getOrDefault "brrp_mc_version", project.minecraft_version
    modImplementation "pers.solid:brrp-forge:${project.brrp_version}-${brrp_mc_version}"
    // 合理排序模组
    def reasonable_sorting_mc_version = project.properties.getOrDefault "reasonable_sorting_mc_version", project.minecraft_version
    modImplementation("pers.solid.mod:reasonable-sorting-forge:${project.reasonable_sorting_version}-mc${reasonable_sorting_mc_version}") {
        exclude group: "net.minecraftforge"
    }

    // 由于新版的 Loom 没有 @CanIgnoreReturnValue 等注解，故在这里手动添加。
    modImplementation "com.google.errorprone:error_prone_annotations:+"
}

processResources {
    inputs.property "version", project.mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.mod_version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

java {
        sourceCompatibility = JavaVersion.VERSION_16
        targetCompatibility = JavaVersion.VERSION_16

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    // add some additional metadata to the jar manifest
    manifest {
        attributes([
                "Specification-Title"     : "Extended Block Shapes",
                "Specification-Vendor"    : "SolidBlock",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.mod_version,
                "Implementation-Vendor"   : "SolidBlock",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
        maven {
            // 将模块导出至本地另一个项目的位置中，该项目与 GitHub 项目关联。
            // 随后，推送那个项目至 GitHub 上。
            url = 'file:../mvn-repo'
        }
    }
}

ext {
    release_type = mod_version.contains('beta') ? 'beta' : 'release' as String
}


/**
 * 从 UpdateLog-en.md 中提取更新日志
 */
String getUpdateLog(String modVersion = project.mod_version) {
    StringBuilder builder = new StringBuilder()
    boolean start = false
    file('UpdateLog-en.md').eachLine {
        if (it.matches("^###\\s*" + modVersion + '$')) {
            start = true
        } else if (it.startsWith("###")) {
            start = false
        } else if (start) {
            builder.append it
            builder.append '\n'
        }
        return
    }
    return builder.toString().trim()
}

// 模组发布部分

println "当前版本（${project.mod_version}）更新记录："
final String changelogContent = getUpdateLog(project.mod_version.replaceAll('-.+?\$', ""))
println changelogContent

tasks.register('curseforge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    doFirst {
        def getenv = System.getenv("CURSEFORGE_TOKEN")
        println("CurseForge 令牌: $getenv")
        if (getenv) apiToken = getenv
    }
    def mainFile = upload('514125', remapJar)
    mainFile.changelog = changelogContent
    mainFile.changelogType = 'markdown'
    mainFile.releaseType = release_type

    for (final String v in (project.supported_minecraft_versions.split(','))) {
        mainFile.addGameVersion v
    }

    mainFile.addRelations 'requiredDependency', 'fabric-api', 'better-runtime-resource-pack'

    // The sources JAR
    def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
}

modrinth {
    projectId = 'tb7kCxSW'
    String platform = project.properties.getOrDefault 'loom.platform', 'forge'
    versionNumber = "${rootProject.mod_version}-${platform}-${rootProject.minecraft_version}"
    versionType = release_type
    uploadFile = remapJar
    gameVersions = project.supported_minecraft_versions.isEmpty() ? List.of(rootProject.minecraft_version) : (project.supported_minecraft_versions as String).split(',') as List<String>
    loaders = [platform]
    var dependenciesList = [new ModDependency('JnrDtPAE', 'required')] // brrp
    if (platform == 'fabric') dependenciesList.add new ModDependency('P7dR8mSH', 'required') // Fabric API
    dependencies = dependenciesList
    changelog = changelogContent
}

githubRelease {
    def getenv = System.getenv("GITHUB_TOKEN")
    if (getenv) token = getenv
    tasks.githubRelease.doFirst {
        println "GitHub 令牌: $getenv"
    }
    owner = "SolidBlock-cn"
    repo = "extshape"
    tagName = "v$project.mod_version"
    targetCommitish = "1.19.4"
    body = changelogContent
    draft = true
    prerelease = false
    releaseAssets remapJar, remapSourcesJar
    allowUploadToExisting = true
    apiEndpoint = "https://api.github.com"
}

publish {
    dependsOn tasks.curseforge, tasks.modrinth, tasks.githubRelease
}

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    if ([rootProject.tasks.curseforge, rootProject.tasks.modrinth, rootProject.tasks.githubRelease, rootProject.tasks.publish].any { graph.hasTask(it) }) {
        subprojects {
            project.tasks.each { Task subTask ->
                subTask.enabled = rootProject.tasks.any { it.dependsOn.contains(subTask) }
            }
            println "Disabling tasks for subproject $project"
        }
    }
}