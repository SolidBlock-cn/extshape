import com.modrinth.minotaur.dependencies.ModDependency

plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'

    // 用于模组发布
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version '1.1.+'
    id "com.github.breadmoirai.github-release" version "2.5.2"
}

base {
    archivesName = project.archives_base_name + "-fabric"
}
version = project.mod_version + '-mc' + project.minecraft_version
group = project.maven_group

allprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.

        // Mod Menu 模组
        maven { url 'https://maven.terraformersmc.com/releases/' }
        // Cloth Config、Roughly Enough Items
        maven { url "https://maven.shedaniel.me/" }

        // 合理模组（仅限 1.19.2 之前）。这两个模组均存储于本地的 maven 仓库。
        mavenLocal()
    }

    dependencies {
        // To change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API
        modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")
        // ModMenu 模组
        modImplementation ("com.terraformersmc:modmenu:${project.modmenu_version}")

        // 下面两个模组均存储于本地的 maven 仓库。

        // 由于新版的 Loom 没有 @CanIgnoreReturnValue 等注解，故在这里手动添加。
        modImplementation "com.google.errorprone:error_prone_annotations:+"
    }

    processResources {
        inputs.property "version", project.mod_version

        filesMatching("fabric.mod.json") {
            expand "version": project.mod_version
        }
    }

    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"

        it.options.release = 17
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17

        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${base.archivesName.get()}" }
        }
    }

    publishing {
        publications {
            create("mavenJava", MavenPublication) {
                artifactId = project.archives_base_name
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }

    loom {
        runs {
            client {
                programArg "-username=Solid"
            }
        }

        runConfigs.configureEach {
            it.configName = "Minecraft Fabric ${it.name.capitalize()}"
            ideConfigGenerated = true

            runDir = project.relativePath(project(':').file('run')).toString()
        }
    }
}

ext {
    release_type = mod_version.contains('alpha') ? 'alpha' : mod_version.contains('beta') ? 'beta' : 'release' as String
}

subprojects {
    dependencies {
    }
}

project(':runtest') {
    repositories {
        // Mods on CurseForge
        maven {
            url "https://cursemaven.com"
            content {
                includeGroup "curse.maven"
            }
        }
    }
    dependencies {
        implementation project(path: ':', configuration: "namedElements")
        implementation project(path: ':with_blockus', configuration: "namedElements")
        if (project.hasProperty('imblocker_version') && !project.imblocker_version.isEmpty()) {
            modRuntimeOnly "curse.maven:imblockerfabric-399225:$project.imblocker_version"
        }
        if (project.hasProperty('rei_version') && !project.rei_version.isEmpty()) {
            modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:$project.rei_version"
        }
    }

    [tasks.remapJar, tasks.remapSourcesJar, tasks.build].each {
        it.enabled = false
    }
}


/**
 * 从 UpdateLog-en.md 中提取更新日志
 */
String getUpdateLog(String modVersion = project.mod_version) {
    StringBuilder builder = new StringBuilder()
    boolean start = false
    file('UpdateLog-en.md').eachLine {
        if (it.matches("^###\\s*" + modVersion + '$')) {
            start = true
        } else if (it.startsWith("###")) {
            start = false
        } else if (start) {
            builder.append it
            builder.append '\n'
        }
        return
    }
    return builder.toString().trim()
}

// 模组发布部分

println "当前版本（${project.mod_version}）更新记录："
final String changelogContent = getUpdateLog(project.mod_version.replaceAll('-.+?\$', ""))
println changelogContent

tasks.register('curseforge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    doFirst {
        def getenv = System.getenv("CURSEFORGE_TOKEN")
        println("CurseForge 令牌: $getenv")
        if (getenv) apiToken = getenv
    }
    def mainFile = upload('514125', remapJar)
    mainFile.changelog = changelogContent
    mainFile.changelogType = 'markdown'
    mainFile.releaseType = release_type

    for (final String v in (project.supported_minecraft_versions.split(','))) {
        mainFile.addGameVersion v
    }

    mainFile.addRelations 'requiredDependency', 'fabric-api'

    // The sources JAR
    def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
}

modrinth {
    projectId = 'tb7kCxSW'
    String platform = project.properties.getOrDefault 'loom.platform', 'fabric'
    versionNumber = "${rootProject.mod_version}-${platform}-${rootProject.minecraft_version}"
    versionType = release_type
    uploadFile = remapJar
    gameVersions = project.supported_minecraft_versions.isEmpty() ? List.of(rootProject.minecraft_version) : (project.supported_minecraft_versions as String).split(',') as List<String>
    loaders = [platform]
    var dependenciesList = []
    if (platform == 'fabric') dependenciesList.add new ModDependency('P7dR8mSH', 'required') // Fabric API
    dependencies = dependenciesList
    changelog = changelogContent
}

githubRelease {
    def getenv = System.getenv("GITHUB_TOKEN")
    if (getenv) token = getenv
    tasks.githubRelease.doFirst {
        println "GitHub 令牌: $getenv"
    }
    owner = "SolidBlock-cn"
    repo = "extshape"
    tagName = "v$project.mod_version"
    targetCommitish = "1.20.4"
    body = changelogContent
    draft = true
    prerelease = false
    releaseAssets remapJar, remapSourcesJar
    allowUploadToExisting = true
    apiEndpoint = "https://api.github.com"
}

publish {
    dependsOn tasks.curseforge, tasks.modrinth, tasks.githubRelease
}

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    if ([rootProject.tasks.curseforge, rootProject.tasks.modrinth, rootProject.tasks.githubRelease, rootProject.tasks.publish].any { graph.hasTask(it) }) {
        subprojects {
            project.tasks.each { Task subTask ->
                subTask.enabled = rootProject.tasks.any { it.dependsOn.contains(subTask) }
            }
            println "Disabling tasks for subproject $project"
        }
    }
}

fabricApi {
    configureDataGeneration() {
        it.modId = "extshape"
    }
}